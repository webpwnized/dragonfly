# Define the name of your workflow.
name: Build, Scan, and Push Image to DockerHub

# Specify when this workflow should run (on a push event to the 'main' branch).
on:
  push:
    branches:
      - 'main'

# Define environment variables for better organization.
env:
  WEB_CONTAINER_NAME: "www"  # Name of the web container

jobs:

  docker-build:

    name: build-image-and-push-to-dockerhub

    runs-on: ubuntu-latest
    
    # Define permissions for specific actions
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      # Step 1: Prepare the runner and check out the codebase.
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: .  # Check out the codebase to the current directory.

      # Step 2: Get the version from a file and set it as an environment variable.
      - name: Get version from version file
        run: |
          VERSION=$(cat version)  # Read version from file named 'version'.
          echo "VERSION=$VERSION" >> $GITHUB_ENV  # Set the version as an environment variable.

      # Step 3: Set up Docker Buildx on the runner.
      # https://github.com/marketplace/actions/build-and-push-docker-images
      - name: Set up Docker Buildx on the runner
        uses: docker/setup-buildx-action@v3

      # Step 4: Login to Docker Hub using secrets for authentication.
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}  # Username from DockerHub secrets.
          password: ${{ secrets.DOCKERHUB_TOKEN }}  # Token from DockerHub secrets.

      # ----------------------------------------------------------------------------
      # Web Container
      # ----------------------------------------------------------------------------
     
      # Step 5: Build and export Web Container to Docker
      - name: Build and Export Web Container to Docker
        uses: docker/build-push-action@v5
        with:
          push: false  # Do not push the built image.
          context: .  # Use the current directory as the build context.
          file: .build/${{ env.WEB_CONTAINER_NAME }}/Dockerfile  # Path to the Dockerfile.
          load: true  # Load the built image into Docker.
          tags: webpwnized/dragonfly:${{ env.WEB_CONTAINER_NAME }}  # Docker image tag.

      # Step 6: Run Trivy vulnerability scanner on Web Container
      - name: Run Trivy vulnerability scanner on Web Container
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'webpwnized/dragonfly:${{ env.WEB_CONTAINER_NAME }}'  # Image reference.
          format: 'sarif'  # Output format for scan results.
          output: '${{ env.WEB_CONTAINER_NAME }}-trivy-scan-results.sarif'  # Output file for scan results.
  
      # Step 7: View Trivy scan results
      - name: View Results
        run: cat ${{ env.WEB_CONTAINER_NAME }}-trivy-scan-results.sarif  # Output Trivy scan results.

      #- name: Upload Web Container Trivy scan results to GitHub Security tab
      #  uses: github/codeql-action/upload-sarif@main
      #  with:
      #    sarif_file: '${{ env.WEB_CONTAINER_NAME }}-trivy-scan-results.sarif'
      #    category: ${{ env.WEB_CONTAINER_NAME }}
  
      # Step 8: Build and push Web Container
      - name: Build and push Web Container
        uses: docker/build-push-action@v5
        with:
          context: .  # Use the current directory as the build context.
          file: .build/${{ env.WEB_CONTAINER_NAME }}/Dockerfile  # Path to the Dockerfile.
          push: true  # Push the built image to DockerHub.
          tags: webpwnized/dragonfly:${{ env.WEB_CONTAINER_NAME }}  # Docker image tag.

      # Step 9: Build and push Web Container with version number
      - name: Build and push Web Container with version number
        uses: docker/build-push-action@v5
        with:
          context: .  # Use the current directory as the build context.
          file: .build/${{ env.WEB_CONTAINER_NAME }}/Dockerfile  # Path to the Dockerfile.
          push: true  # Push the built image to DockerHub.
          tags: webpwnized/dragonfly:${{ env.WEB_CONTAINER_NAME }}-${{ env.VERSION }}  # Docker image tag with version number.
